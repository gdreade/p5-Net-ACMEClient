#! /usr/bin/env perl
#
# To read the man page for this script:
#
#    ./acme-client-zoneedit -man
#

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use File::Spec;
use Config::Tiny;

BEGIN {
    # This chunk of code is to allow for the fact that our modules
    # may not be installed in the @INC path; they may be in a ../lib
    # or ../lib/perl5  directory hierarchy if we're running a bundle
    # extracted into an arbitrary directory.
    #
    # We use taint mode and the env(1) indirection to launch the program,
    # so using the -I argument won't work.

    my @mods = ( "Net::ACMEClient",
		 "Net::ACMEClient::DNS::ZoneEditor",
		 "Net::ACMEClient::DNS"
	);

    for my $mod (@mods) {
	if (! eval "require $mod") {
	    my ($volume, $directory, $file) = File::Spec->splitpath(__FILE__);
	    my $bindir = File::Spec->canonpath($directory);
	    my $libdir = File::Spec->catdir($bindir,
					    File::Spec->updir,
					    "lib");
	    my $perldir = File::Spec->catdir($libdir, "perl5");
	    
	    if ($libdir =~ m,^(.*)$,) {
		my $untainted = $1;
		unshift(@INC, $untainted)
		    || die "couldn't unshift lib directory";
	    }

	    if ($perldir =~ m,^(.*)$,) {
		my $untainted = $1;
		unshift(@INC, $untainted)
		    || die "couldn't unshift perl directory";
	    }
	    eval "require $mod" or die "couldn't find module $mod: $!";
	}
	$mod->import();
    }
}

use Net::ACMEClient::DNS::ZoneEditor qw(:macros);

# Enable taint mode
# warn 'Taint mode is '.(${^TAINT} ? 'on' : 'off'); # For debugging
exec($^X,'-T',$0,@ARGV) unless ${^TAINT};

# sanitize $PATH and clean up %ENV
local $ENV{PATH} = "/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin"
    . ":/usr/local/bin" . "";
delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};

# command line options
my ($man, $help);
my ($fqdn, $challenge, $encoded_challenge);
my $config_file;
my $wait = 1;

# defaults to be overridden in config file
my $use_dnssec = 1;
my $debug_queries = 0;
my $use_ipv4 = 1;
my $use_ipv6 = 1;
my $challenge_ttl = DEFAULT_CHALLENGE_TTL;
my $challenge_suffix = DEFAULT_CHALLENGE_SUFFIX;
my $new_file_suffix = DEFAULT_NEW_FILE_SUFFIX;
my $old_file_suffix = DEFAULT_OLD_FILE_SUFFIX;
my $soa_suffix = DEFAULT_SOA_SUFFIX;
my $reload_command;

Getopt::Long::Configure ("bundling", "no_ignore_case");
GetOptions("man" => \$man,
	   "help|h" => \$help,
	   "config|c=s" => \$config_file,
	   "fqdn=s" => \$fqdn,
	   "challenge=s" => \$challenge,
	   "encoded-challenge=s" => \$encoded_challenge,
	   "wait!" => \$wait)
    || pod2usage(2);
	   
#
# evaluate options
#
pod2usage(1) if defined($help);
pod2usage(-exitval => 0, -verbose => 2) if defined($man);

my $client =
    Net::ACMEClient->new(prog_name => __FILE__,
			 config_file => $config_file);

$client->setup || die "setup failed";

&read_config;

# conchecks

my $four_or_six = undef;
if ($use_ipv4 && !$use_ipv6) {
    $four_or_six = Net::ACMEClient::DNS->IPV4_ONLY;
} elsif (!$use_ipv4 && $use_ipv6) {
    $four_or_six = Net::ACMEClient::DNS->IPV6_ONLY;
} elsif (!$use_ipv4 && !$use_ipv6) {
    $client->fatal("at least one of IPv4 or IPv6 must be enabled");
}

if (defined($fqdn) || defined($challenge) || defined($encoded_challenge)) {
    if (!defined($fqdn)) {
	$client->fatal("--fqdn must be specified when either --challenge or "
		       . "--encoded-challenge is given");
    }
    if (!defined($challenge) && !defined($encoded_challenge)) {
	$client->fatal("at least one of --challenge or --encoded-challenge " .
		       "must be specified when using --fqdn");
    }
    if (defined($challenge) && defined($encoded_challenge)) {
	$client->fatal("only one of --challenge or --encoded-challenge may " .
		       "be specified when using --fqdn");
    }
    if (defined($challenge)) {
	$encoded_challenge = 
	    Net::ACMEClient::DNS->encode_challenge($challenge);
    }
}


# logic begins
my $ret;
if (defined($fqdn)) {
    $ret = &process_challenge;
}
$client->shutdown;
exit($ret);


sub process_challenge {
    my $config = $client->config;
    
    # get zone-specific parameters from config
    my $query_timeout = Net::ACMEClient::DNS->DEFAULT_PROPAGATION_TIMEOUT;
    my $v = $config->{$fqdn}->{query_timeout};
    defined($v) && (int($v) > 0) && ($query_timeout = int($v));

    my $section = $config->{$fqdn};
    defined($section) ||
	$client->fatal("no section for $fqdn was found in " .
		       "configuration file " . $client->config_file);

    my $base_name = $section->{base_name};
    defined($base_name) ||
	$client->fatal("base_name was not set in the [$fqdn] " .
		       "section of " . $client->config_file);

    my $nameservers = undef;
    my $nameserver_list = $section->{nameservers};
    if (defined($nameserver_list)) {
	my @ns = split /\s+/, $nameserver_list;
	if (scalar(@ns) > 0) {
	    $nameservers = \@ns;
	}
    }

    my $host_suffix = $section->{host_suffix};
    if (!defined($host_suffix) || (length($host_suffix) == 0)) {
	# assume that we can use the first component of the fqdn
	if ($fqdn =~ m,^([a-z0-9]+[-a-z0-9]*),i) {
	    $host_suffix = $1;
	} else {
	    $client->fatal("in section [$fqdn] of " . $client->config_file .
			   "host_suffix was not set and " .
			   "could not be inferred");
	}
    }

    my $zone = $section->{zone};
    if (!defined($zone)) {
	# assume that we can use all but the first component of the fqdn
	if ($fqdn =~ m,^([a-z0-9]+[-a-z0-9]*)\.([-\.a-z0-9]+),i) {
	    $zone = $2;
	} else {
	    $client->fatal("in section [$fqdn] of " . $client->config_file .
			   "zone was not set and " .
			   "could not be inferred");
	}
    }

    # do the work
    my $dns = Net::ACMEClient::DNS->new(debug_queries => $debug_queries,
					four_or_six => $four_or_six,
					use_dnssec => $use_dnssec,
					use_syslog => $client->use_syslog);

    my $editor = Net::ACMEClient::DNS::ZoneEditor->new(
	base_name => $base_name,
	challenge_suffix => $challenge_suffix,
	challenge_ttl => $challenge_ttl,
	new_file_suffix => $new_file_suffix,
	old_file_suffix => $old_file_suffix,
	soa_suffix => $soa_suffix
    );

    $editor->write_challenge($fqdn, $encoded_challenge, $host_suffix)
	|| $client->fatal("failed to write challenge file for $fqdn");
    $editor->increment_soa
	|| $client->fatal("failed to increment SOA serial for $fqdn");

    $client->do_via_system($reload_command, $zone)
	|| $client->fatal("$reload_command failed for zone $zone");

    if ($wait) {
	$dns->wait_for_challenge_propagation($fqdn, $challenge, $query_timeout,
					     $nameservers)
	    || $client->fatal("challenges failed to appear for $fqdn on " .
			      "configured DNS servers within the " .
			      "configured timeout");
    }

    $client->info("updated challenge for $fqdn");
    
    1;
}

sub read_config {
    my $config = $client->config;

    my $v = $config->{_}->{use_dnssec};
    defined($v) && ($use_dnssec = $v);

    $v = $config->{_}->{debug_queries};
    defined($v) && ($debug_queries = $v);

    $v = $config->{_}->{use_ipv4};
    defined($v) && ($use_ipv4 = $v);

    $v = $config->{_}->{use_ipv6};
    defined($v) && ($use_ipv6 = $v);

    $v = $config->{_}->{challenge_ttl};
    defined($v) && (int($v) > 0) && ($challenge_ttl = $v);

    $v = $config->{_}->{challenge_suffix};
    defined($v) && ($challenge_suffix = $v);

    $v = $config->{_}->{new_file_suffix};
    defined($v) && (length($v) > 0) && ($new_file_suffix = $v);

    $v = $config->{_}->{old_file_suffix};
    defined($v) && (length($v) > 0) && ($old_file_suffix = $v);

    $v = $config->{_}->{soa_suffix};
    defined($v) && (length($v) > 0) && ($soa_suffix = $v);

    $v = $config->{_}->{reload_command};
    if (!defined($v)) {
	$client->fatal("reload_command was not specified in " .
		       $client->config_file);
    } elsif ($v =~ m,^([-_\./a-z0-9]+)$,) {
	$reload_command = $1;
	if (! -x $reload_command) {
	    $client->fatal("reload_command $reload_command was not found " .
			   "or is not executable");
	}
    }

    1;
}

1;

__END__

=head1 NAME

acme-client-zoneedit - Zone editing helper for acme-client(1)

=head1 SYNOPSIS

acme-client-zoneedit --man

acme-client-zoneedit --fqdn FQDN --challenge CHALLENGE

=head1 DESCRIPTION

B<acme-client-zoneedit> is a helper program for the 
B<acme-client>(1) Let's Encrypt ACME protocol client by Kristaps Dzonsons

It is normally invoked with the pair of arguments
B<--fqdn> and B<--challenge> (or B<--encoded-challenge>) which will take
the output from B<acme-client> and ensure the challenge appears in the
appropriate DNS zones.

B<acme-client-zoneedit> would normally be run on the master authoritive
name server (which is not necessarily the same machine running
B<acme-client>).


=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--config>=I<filename> | B<-c>I<filename>

Use the configuration file I<filename>.  If not specified, the default
will be used.  See the B<CONFIGURATION> section, below.

=item B<--fqdn>

The fully qualified domain name of the host for which a challenge 
should be added or updated.  If provided, then exactly one of
B<--challenge> or B<--encoded-challenge> must also be provided.

=item B<--challenge>=I<value>

Specify the raw challenge as provided by B<acme-client>(1).

Be aware that using this flag can expose the host key in the process table
or shell history.  If that is an issue, you may want to consider using
the B<--encoded-challenge> flag.

If this option is specified, then B<--fqdn> must also be specified.

=item B<--encoded-challenge>=I<value>

Specify the encoded challenge to use.

If this option is specified, then B<--fqdn> must also be specified.

=item B<--no-wait>

Normally this program will wait and verify that the challenge has
propagated to the appropriate authoritive nameservers.  Specifying
B<--no-wait> disables this verification.

=back

=head1 CONFIGURATION

On startup, B<acme-client-zoneedit> will load its configuration file.
If it is not specified explicitly on the command line, it will look for
the file B<acme-client-zoneedit.conf> in B</etc> and B</usr/local/etc>.

The following is a sample configuration file.  Only a few parameters are
mandatory.  Those that have reasonable defaults are shown commented out.
Parameter names typically match those of attribute names in the supporting
Perl modules mentioned in the SEE ALSO section, below.

=over 8

 # debug_queries = 0
 # use_ipv4 = 1
 # use_ipv6 = 1
 # use_syslog = 1

 reload_command = /usr/bin/true

 # We need a section for each FQDN that we permit to be processed.
 [www.example.com]

 # A mandatory property.  This is the base name of the files that
 # will be created or updated.  It can be the full pathname to
 # the original zone file, but you may find it more convenient to
 # put these files in another directory.  So for example, if your
 # main zone file for this domain is
 #    /path/to/master/example.com
 # you may want to use:
 #    /path/to/acme-client/example.com
 # and alter your $INCLUDEs appropriately.

 base_name = /var/nsd/zones/acme/example.com

 # The whitespace-delimited set of nameservers that are checked
 # to ensure the challenge has propagated.  This can be either
 # by hostname or IP (which of course should be routable IPs, 
 # unlike this example). If this list isn't provided, the list of
 # nameservers is deduced from the appropriate DNS NS records for
 # this host.
 #
 # Beware of split-horizon (multiple view) DNS situations and 
 # ensure that the nameservers you are checking give the same
 # answers for the challege as those that will be seen by the 
 # ACME servers.

 #nameservers = ns1.example.com 192.168.1.55

 # The maximum amount of time that we'll wait for the challenge
 # to propagate to the nameservers before we give up and consider
 # the operation to have failed.

 #query_timeout = 120

=back

=head1 SEE ALSO

acme-client(1) (https://github.com/kristapsdz/acme-client)

acme-client-wrapper(1)

Net::ACMEClient(3pm),
Net::ACMEClient::DNS(3pm),
Net::ACMEClient::DNS::ZoneEditor(3pm)

=head1 ACKNOWLEDGEMENTS

Thanks to Kristaps Dzonsons for his original work on B<acme-client>(1)
and to the various OpenBSD developers for their modifications and 
including B<acme-client> in the OpenBSD base distribution.

=head1 AUTHOR

Devin Reade <gdr@gno.org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2017 by Devin Reade

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.

=cut
